(define (f-recursive n)
  (if (< n 3)
      n
      (+ (f-recursive (- n 1))
	 (* (f-recursive (- n 2)) 2)
	 (* (f-recursive (- n 3)) 3))))
(define (f-iterative n)
  (define (f-iter a b c count)
    (cond ((= count 0) a)
	  ((= count 1) b)
	  ((= count 2) c)
	  (else (f-iter b c (+ (* 3 a)
			       (* 2 b)
			       (* 1 c)) (- count 1)))))
  (f-iter 0 1 2 n))
